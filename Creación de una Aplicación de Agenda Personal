import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry
from datetime import datetime

class AgendaEventos:
    def __init__(self, root):
        self.root = root
        self.root.title("Agenda de Eventos")
        self.root.geometry("600x400")

        # ===== Frame de Lista de Eventos =====
        frame_lista = ttk.Frame(root, padding=10)
        frame_lista.pack(fill=tk.BOTH, expand=True)

        columnas = ("fecha", "hora", "descripcion")
        self.tree = ttk.Treeview(frame_lista, columns=columnas, show="headings", height=10)
        self.tree.heading("fecha", text="Fecha")
        self.tree.heading("hora", text="Hora")
        self.tree.heading("descripcion", text="Descripción")
        self.tree.column("fecha", width=100, anchor="center")
        self.tree.column("hora", width=80, anchor="center")
        self.tree.column("descripcion", width=300, anchor="w")
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scroll_y = ttk.Scrollbar(frame_lista, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscroll=scroll_y.set)
        scroll_y.pack(side=tk.RIGHT, fill=tk.Y)

        # ===== Frame de Entrada de Datos =====
        frame_entrada = ttk.LabelFrame(root, text="Nuevo Evento", padding=10)
        frame_entrada.pack(fill=tk.X, padx=10, pady=5)

        ttk.Label(frame_entrada, text="Fecha:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
        self.fecha_entry = DateEntry(frame_entrada, date_pattern="yyyy-mm-dd")
        self.fecha_entry.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(frame_entrada, text="Hora (HH:MM):").grid(row=0, column=2, padx=5, pady=5, sticky="e")
        self.hora_entry = ttk.Entry(frame_entrada, width=10)
        self.hora_entry.grid(row=0, column=3, padx=5, pady=5)

        ttk.Label(frame_entrada, text="Descripción:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
        self.desc_entry = ttk.Entry(frame_entrada, width=50)
        self.desc_entry.grid(row=1, column=1, columnspan=3, padx=5, pady=5)

        # ===== Frame de Botones =====
        frame_botones = ttk.Frame(root, padding=10)
        frame_botones.pack()

        ttk.Button(frame_botones, text="Agregar Evento", command=self.agregar_evento).grid(row=0, column=0, padx=10)
        ttk.Button(frame_botones, text="Eliminar Seleccionado", command=self.eliminar_evento).grid(row=0, column=1, padx=10)
        ttk.Button(frame_botones, text="Salir", command=root.quit).grid(row=0, column=2, padx=10)

    def agregar_evento(self):
        fecha = self.fecha_entry.get()
        hora = self.hora_entry.get().strip()
        desc = self.desc_entry.get().strip()

        # Validar hora
        try:
            datetime.strptime(hora, "%H:%M")
        except ValueError:
            messagebox.showerror("Error", "Formato de hora inválido. Use HH:MM (24h).")
            return

        if not desc:
            messagebox.showerror("Error", "La descripción no puede estar vacía.")
            return

        self.tree.insert("", tk.END, values=(fecha, hora, desc))
        self.hora_entry.delete(0, tk.END)
        self.desc_entry.delete(0, tk.END)

    def eliminar_evento(self):
        seleccionado = self.tree.selection()
        if not seleccionado:
            messagebox.showwarning("Aviso", "Seleccione un evento para eliminar.")
            return
        if messagebox.askyesno("Confirmar", "¿Desea eliminar el evento seleccionado?"):
            self.tree.delete(seleccionado)

if __name__ == "__main__":
    root = tk.Tk()
    app = AgendaEventos(root)
    root.mainloop()
